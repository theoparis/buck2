searchState.loadedDescShard("starlark_lsp", 0, "The server that allows IDEs to evaluate and interpret …\nCollection of implementations for completions, and related …\nBased on the reference lsp-server example at …\nThe first argument to a <code>load</code> statement.\nA string in another context.\nA possible result in auto-complete for a string context.\nThe context in which to offer string completion options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe text to insert, if different from the value.\nFrom where to start the insertion, compared to the start …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of result, e.g. a file vs a folder.\nThe value to complete.\nA “file://” url with a path sent from the LSP client.\nVarious pieces of context to allow the LSP to interact …\nThe result of evaluating a starlark program for use in the …\nSettings that the LspContext can provide to change what …\nA URL that represents the two types (plus an “Other”) …\nErrors that can happen when converting LspUrl and Url …\nThe path component of the URL was not absolute. This is …\nAny other type. Often should just be ignored, or return an …\nA “starlark:” url. This is mostly used for native …\nThe result of resolving a StringLiteral when looking up a …\nFor some reason the PathBuf/Url in the LspUrl could not be …\nIf the program could be parsed, the parsed module.\nThe list of diagnostic issues that were encountered while …\nWhether goto definition should work.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the preloaded environment for a particular file.\nGet the contents of a starlark program at a given path, if …\nGet valid completion options if possible, based on the …\nGet the LSPUrl for a global symbol if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function that takes the AstModule at path specified by …\nGet the contents of a file at a given URI, and attempt to …\nParse a file with the given contents. The filename is used …\nReturns the path component of the underlying URL\nRender the target URL to use as a path in a <code>load()</code> …\nResolve a path given in a <code>load()</code> statement.\nResolve a string literal into a Url and a function that …\nInstantiate an LSP server that reads and writes using the …\nInstantiate an LSP server that reads on stdin, and writes …\nThe path that a string literal resolves to.")