searchState.loadedDescShard("buck2_error", 0, "// High level descriptions of the “phase” of the build …\nFrom ExitResult::bail\nProvides the <code>context</code> method for <code>Result</code>.\nBuild errors.\nMisc phases/subsystem tags\nMisc error conversions\nClean stale command was interrupted\nErrors while cleaning stale artifacts\ngRPC protocol error between client and server from the …\nGeneric compatibility error tag\nError during attribute configuration during target …\nFrom <code>buck2 debug crash</code>\nConnect to buckd failed.\nDaemon is running another command.\nDaemon was preempted during preemptible command by another …\nDaemon start up failed while initializing DaemonStateData.\nThe daemon couldn’t be killed\nDep only incompatible error\nDice Errors Value: https://fburl.com/code/5dxzaw41\nAction execution\nContains the error value\nThe core error type provided by this crate.\nGenerates an error impl for the type.\nSee the documentation in the <code>error.proto</code> file for details. …\nCommon exit codes for buck with stronger semantic meanings\nA process couldn’t be killed\nToo large gRPC message.\nClient error (4xx).\nServer error (5xx).\nErrors during buck2 install.\nInternal error in buck2. This is a bug.\nThe daemon reported that it was shutting down during the …\nClient IO Broken pipe specifically from client stdio …\nEden IO Section Indicates that the IO operation went …\nFailures indicating that Eden Failed to Connect or Mount\nIO Error encountered in Eden that we do not correspond to …\nThe underlying cause of request failures, copied from …\nThe nature of the failure, designed after (but not …\nIO done on a source file in the repo\n/// IO SECTION\nBuild failed during materialization\nTarget specified is not found in the package/build file\nCould not find buck project root\nNo valid internal or VPNless certs could be found\nAllows simpler construction of the Ok case when the result …\nContains the success value\nArtifact projection to a path that does not exist\nRE TCode values: https://fburl.com/code/1ael5pmz\nTCodeReasonGroup values: https://fburl.com/code/pvsy2jgv\n/// Remote Execution\nJemalloc assertion failure.\nServer disconnect with no error but memory pressure was …\nServer stderr indicates that the server panicked.\nSEGV.\nServer received SIGABRT\nServer received SIGBUS\nServer received SIGTERM\nServer stack overflow.\nServer stderr is empty.\nThe reason for server failure is unknown.\nServer transport errors. Eg. Channel not open\ntarget configuration is incompatible error\nTests\nOnly used by tests, should not occur outside test …\nTest runner explicitly requested that this exit code be …\nA piece of metadata to indicate whether this error is an …\nError from TestExecutor\nNone turned into an error. This carries no useful …\nFunctionality not implemented in Buck2\nUniquely identifies an instance of an error root\nSame as above\n<code>visibility</code>, <code>within_view</code>.\nTaken from watchman_client::Error\nMisc external error conversions\nIntegrations of <code>buck2_error::Error</code> with <code>anyhow::Error</code> and …\nString value of the enum field names used in the ProtoBuf …\nThe most interesting tag among this error tags.\nCode below returns an anyhow::Error, it is used while we …\nStable identifier for grouping errors.\nSupports adding context to an error by either augmenting …\nConversion impls for different error types to ‘…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ErrorTag</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nOnly intended to be used for debugging, helps to …\nIndicates a bug in buck2.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the error has not been emitted yet, returns <code>None</code>, …\nReturns <code>true</code> if <code>value</code> is a variant of <code>ErrorTag</code>.\nProvide metadata about an error.\nIdentifier for deduplication during a build.\nStarlark::Error &lt;-&gt; buck2_error::Error conversion …\nGet all the tags that have been added to this error\nThis can be <code>provide</code>d by an error to inject buck2-specific …\nThe protobuf ActionError, if the root was an action error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen there’s no tag, but we want to put something in …\nPick the most interesting error by best tag.\nPick the most interesting tag from a list of tags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors can be categorized by tags only if they have any …\nHidden tags only used internally, for categorization.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a file path returned by <code>file!</code> or <code>Location::file()</code> …\nWhether or not to mark a starlark error as an input/user …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")