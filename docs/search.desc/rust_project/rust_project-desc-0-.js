searchState.loadedDescShard("rust_project", 0, "Build the saved file’s owning target. This is meant to …\nConvert buck’s build to a format that rust-analyzer can …\n<code>DevelopJson</code> is a more limited, stripped down …\nCreate a new Rust project\nThe ‘develop-json’ command needs to have 3 modes:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA build-system independent project structure defined and …\nPrint the current version.\nCommand used to run <code>buck2</code>. Defaults to <code>&quot;buck2&quot;</code>.\nCommand used to run <code>buck2</code>. Defaults to <code>&quot;buck2&quot;</code>.\nCommand used to run <code>buck2</code>. Defaults to <code>&quot;buck2&quot;</code>.\nCheck that there are no cycles in the generated crate …\nThe name of the client invoking rust-project, such as ‘…\nThe name of the client invoking rust-project, such as ‘…\nThe name of the client invoking rust-project, such as ‘…\nPath of the file being developed.\nInclude a <code>build</code> section for every crate, including …\nKinds of Rust projects that can be created\nOptional argument specifying build mode.\nOptional argument specifying build mode.\nName of the project being created.\nWhere to write the generated <code>rust-project.json</code>.\nPath to create new crate at. The new directory will be …\nUse a <code>rustup</code>-managed sysroot instead of a <code>.buckconfig</code>…\nPretty-print generated <code>rust-project.json</code> file.\nThe file saved by the user. <code>rust-project</code> will infer the …\nWrites the generated <code>rust-project.json</code> to stdout.\nThe directory containing the Rust source code, including …\nBuck targets to include in rust-project.json.\nConvert <code>dep_targets</code> to <code>Dep</code> values.\nCheck that there are no cycles in the crate dependency …\nDetermines the owning target(s) of the saved file and …\nInvoke <code>buck2</code> with the given subcommands.\nInvoke <code>buck</code> with the given subcommands.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor every test target, drop it from <code>target_map</code> and include …\nFind the buildfile that owns each file specified, and …\nIf any target in <code>targets</code> is an alias, resolve it to the …\nReturn the absolute path of the current Buck project root.\nTrim a trailing new line from <code>String</code>. Useful when trimming …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor every Rust file, return the relevant buck targets that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the same as rustfix::Diagnostic, but with a more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the canonical version of <code>path</code> is in a source code …\nTry to canonicalize <code>path</code>, but return <code>path</code> as-is if we …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild system-specific additions the <code>rust-project.json</code>.\nAny kind of Cargo lib crate-type (dylib, rlib, proc-macro, …\nAn optional set of Rust files that comprise the crate.\nSysroot paths. These are documented in the rust-analyzer …\n<code>build_file</code> corresponds to the <code>BUCK</code>/<code>TARGETS</code> file.\nThe set of cfgs activated for a given crate.\nThe set of crates comprising the project.\nOptional crate name used for display purposes; has no …\nEnvironment for the crate, often used by <code>env!</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the crate is a proc-macro crate/\nShould this crate be treated as a member of current “…\nFor proc-macro crates, path to compiled proc-macro (.so, …\nThe path to the root module of the crate.\nOptionally specify the (super)set of <code>.rs</code> files comprising …\nPath to the directory of the sysroot; this is a superset …\nA nested rust-project for the sysroot itself. If not …\nLegacy sysroot config containing only the source code of …\nThe target triple for a given crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChoose sysroot and sysroot_src based on platform.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMapped srcs are effectively aliases. The key is a buck …")