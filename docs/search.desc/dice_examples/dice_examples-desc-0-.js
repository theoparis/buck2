searchState.loadedDescShard("dice_examples", 0, "A math computation built on dice. The math computation …\nA supply chain simulation built on top of DICE.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEach company manufactures a set of resources for a given …\nAdds a list of companies and maps them to their resources.\nChange the upcharge of a company for a resource.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of the resources (and how many) are required.\nMust be called before any companies are added. Sets the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA mapping between resource the company makes and its flat …\nThe number of items this recipe produces (currently unused)\nFind the cheapest manufacturing cost for a resource")