searchState.loadedDescShard("buck2_util", 0, "Used by golden tests written in rust, particularly useful …\nHasher for buck2 code.\nLike <code>panic!</code>, but aborts the process instead of unwinding.\n<code>Arc&lt;[T]&gt;</code> but more efficient.\nWrapper for <code>Arc&lt;str&gt;</code>.\nUnsized type which is a string inside.\nWrapper for <code>Arc&lt;str&gt;</code>.\nConvert to a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe LazyCycleDetector is used to detect cycles in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSemantically the same as <code>futures::future::try_join_all</code>, …\nCommon code for golden tests.\nDuplicate of <code>starlark::tests::util::trim_rust_backtrace</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndent a text block: split text into lines, prepend each …\nValue (typically a function pointer or a trait pointer) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReport the value at a new timestamp\nCPU usage sum for all cores from the system start. Field …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads CPU ticks from /proc/stat.\nSimple wrapper for perf-event to measure the number of …\nCollect the number of instructions executed by the thread.\nReturns the argument unchanged.\nCreate a new instruction counter.\nCalls <code>U::from(self)</code>.\nCreates <code>tokio::process::Command</code> which doesn’t show any …\nCreates <code>std::process::Command</code> which doesn’t show any …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper over a child process that will reap the child …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribing data that can be stored in <code>SelfRef</code>.\nSelf-referential struct.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaintains sliding windows in an ascending sequence of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReport the value at a new timestamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Box&lt;[T]&gt;</code> but thin pointer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocate uninitialized memory for a slice of length <code>len</code>.\nGet the available parallelism\nGet the available parallelism\nReturns the argument unchanged.\nFor tests.\nFor tests.\nCalls <code>U::from(self)</code>.\nQuick and dirty function to either print the full debug …\nTruncate a container of strings and return the …")