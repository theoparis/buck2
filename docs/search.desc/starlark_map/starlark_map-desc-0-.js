searchState.loadedDescShard("starlark_map", 0, "Ordered map optimized for starlark-rust use cases.\nKey equivalence trait.\nA key and its hash.\nA hash value.\nA hasher used by Starlark implementation.\n<code>BuildHasher</code> implementation which produces <code>StarlarkHasher</code>.\nConvert <code>Hashed&lt;K&gt;</code> to <code>Hashed&lt;&amp;K&gt;</code>.\nMake <code>Hashed&lt;K&gt;</code> from <code>Hashed&lt;&amp;K&gt;</code>, where <code>K</code> is <code>Clone</code>.\nMake <code>Hashed&lt;K&gt;</code> from <code>Hashed&lt;&amp;K&gt;</code>.\nCompare self to <code>key</code> and return <code>true</code> if they are equal.\nFinish the hash computation and return the result.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the integer hash value.\nGet the underlying hash.\nHash 64-bit integer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying key taking ownership.\nGet the underlying key.\nGet the underlying key, as mutable.\nCreate a new <code>StarlarkHashValue</code> using the <code>Hash</code> trait for …\nCreate a new <code>Hashed</code> value using the <code>Hash</code> of the key.\nCreates a new hasher.\nDirectly create a new <code>StarlarkHashValue</code> using a hash. The …\nDirectly create a new <code>Hashed</code> using a given hash value. If …\n<code>SmallMap</code> which considers iteration order important for …\n<code>SmallSet</code> which considers order important for equality and …\nMake <code>Hashed&lt;K&gt;</code> from <code>Hashed&lt;&amp;K&gt;</code>, where <code>T</code> is the owned form …\nMake u64 hash from this hash.\nA Map with deterministic iteration order that specializes …\nOrdered set.\nCreate a <code>SmallMap</code> from a list of key-value pairs.\nCreate a <code>SmallSet</code> from a list of values.\n<code>SmallMap</code> which asserts that its elements are sorted.\n<code>SmallSet</code> which asserts that its elements are sorted.\n<code>Vec</code> with elements sorted.\n<code>HashMap</code> that does not expose insertion order.\n<code>HashSet</code> that does not expose insertion order.\nA <code>Vec&lt;(A, B)&gt;</code> like object which stores <code>A</code> and <code>B</code> separately.\nWrapper for <code>SmallMap</code> which considers map equal if …\nClear the map.\nCheck if the map contains the given key.\nGet an entry by key.\nReturns the argument unchanged.\nGet a reference to the value associated with the given key.\nFind an entry by an index.\nFind an entry index for a given key.\nGet a mutable reference to the value associated with the …\nInsert an entry into the map.\nCalls <code>U::from(self)</code>.\nCheck if the map is empty.\nIterate over the entries.\nIterate over the map with hashes.\nIterate over the entries, with mutable values.\nIterate over the keys.\nGet the number of elements in the map.\nCreate a new empty map.\nRemove an entry by key.\nSort the map by keys.\nIterate over the values.\nIterate over the values, with mutable values.\nCreate a new empty map with the specified capacity.\nIterator returned by <code>into_iter</code>.\nIterator returned by <code>iter</code>.\nError returned by <code>try_insert</code>.\n<code>SmallSet</code> wrapper, but equality and hash of self depends on …\nClear the set.\nCheck if the set contains an element.\nGet the first element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an element from the set.\nGet an element by index.\nGet the index of an element in the set.\nInsert an element into the set.\nInsert an element into the set assuming it is not already …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the set is empty.\nIterate over the elements.\nGet the last element.\nGet the number of elements in the set.\nCreate a new empty set.\nThe value that was already in the set.\nReverse the iteration order of the set.\nSort the set.\nRemove an element from the set.\nInsert an element if element is not present in the set, …\nIterate over the union of two sets.\nThe value that was not inserted.\nCreate a new empty set with the specified capacity.\nOccupied or vacant entry.\nIterator that moves entries out of a <code>SmallMap</code>.\nIterator that moves hashed entries out of a <code>SmallMap</code>.\nIterator that moves keys out of <code>SmallMap</code>.\nIterator that moves values out of <code>SmallMap</code>.\nIterator over a small map entry references.\nIterator over the hashed entries of <code>SmallMap</code>.\nIterator over a small map mutable entry references.\nIterator over a small map mutable entry references.\nIterator over a <code>SmallMap</code> keys.\nOccupied entry.\nReference to the actual entry in the map.\nA map with deterministic iteration order.\nNo entry for given key.\nReference to a vacant entry in the map.\nIterator over a <code>SmallMap</code> values.\nIterator over a <code>SmallMap</code> mutable values.\nCurrent map capacity.\nRemove all elements from the map.\nFind if an entry by a given key exists.\nFind if an entry by a given prehashed key exists.\nFind if an entry by a given hashed key exists.\nGet the entry (occupied or not) for the key.\nGet the entry (occupied or not) for the key.\nEqual if the keys and values are equal in the iteration …\nReturns a reference to the first key-value pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValue for this entry.\nQuery the map by a given key.\nQuery the map by a given key, return an index of the entry …\nQuery the map by a given key, return an index of the entry …\nQuery the map by a prehashed key.\nSame as <code>get_hashed</code>, byt takes key by value instead of by …\nFind an entry by an index.\nThe an entry index by a given key.\nFind the index of the given hashed key.\nGet the index of the entry given a hashed key.\nMutable reference to the value in the entry.\nFind the entry by a given key.\nFind a mutable value by a hashed key.\nHash entries in the iteration order.\nInsert the value into the entry.\nInsert a key-value pair into the map.\nInsert a key-value pair into the map.\nInsert an entry into the map without checking for a …\nInsert a key-value pair into the map without checking for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEntries with hashes iterator.\nKey owned iterator.\nGet a reference to the value in the entry with map …\nValue owned iterator.\nIs the map empty?\nEntry references iterator.\nEntry references with hashes iterator.\nMutable entry references iterator.\nMutable entry references iterator, with mutable key …\nKey for this entry.\nKey for this entry.\nKey for this entry.\nKey references iterator.\nReturns a reference to the last key-value pair.\nGet the number of elements in the map.\nDrop the index if the map is too small, and the index is …\nEmpty map.\nInsert if vacant.\nInsert if vacant.\nInsert if vacant.\nRemove the last element.\nReserve capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nReverse the iteration order of the map.\nRemove the entry for the key.\nRemove the entry for the key.\nRemove the entry for the key.\nRemove the entry for the key.\nRemove the entry by index. This is <em>O(N)</em> operation.\nRemove the entry by index. This is <em>O(N)</em> operation.\nSort entries by key.\nValue references iterator.\nMutable value references iterator.\nCreate an empty map with specified capacity.\nIterator over the difference of two sets.\nIterator that moves entries out of a <code>SmallSet</code>.\nIterator that moves hashed entries out of a <code>SmallSet</code>.\nIterator over the hashed entries of <code>SmallSet</code>.\nIterator over the hashed entries of <code>SmallSet</code>.\nIterator over mutable entries of <code>SmallSet</code>.\nAn memory-efficient set with deterministic order, based on …\nIterator over a union of two sets.\nCurrent capacity of the set.\nRemove all elements from the set.\nCheck if the set contains an element.\nCheck if the set contains an element.\nIterator over elements of this set which are not in the …\nEqual if entries are equal in iteration order.\nReturns a reference to the first item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the value stored in the set, if it …\nQuery the set by a prehashed value.\nFind an entry by an index.\nReturn item index, if it exists in the set\nFind the index of the given hashed value.\nFind the index of the given hashed value.\nInsert entry if it doesn’t exist.\nInsert entry if it doesn’t exist.\nHash entries in iteration order.\nInsert the element into the set.\nInsert the element into the set.\nInsert an entry into the set without checking for a …\nInsert the element into the set without checking for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto hashed entries.\nIs the set empty?\nIterate the element references.\nIterate the hashed element references.\nIterate the mutable element references.\nReturns a reference to the last item.\nNumber of elements in the set.\nCreates an empty <code>SmallSet</code>.\nRemove the last element from the set.\nReserve capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nReverse the iteration order of the set.\nRemove the element from the set if it is present.\nRemove the entry for the key.\nRemove the element by index. This is <em>O(N)</em> operation.\nRemove the element by index. This is <em>O(N)</em> operation.\nSort entries.\nRemove the element from the set if it is present,\nIterator over union of two sets.\nEmpty small set with preallocated capacity.\n<code>IndexMap</code> but with keys sorted.\nCheck if the map contains the given key.\nReturns the argument unchanged.\nGet a reference to the value associated with the given key.\nGet a mutable reference to the value associated with the …\nCalls <code>U::from(self)</code>.\nCheck if the map is empty.\nIterate over the entries.\nIterate over the map with hashes.\nIterate over the entries, with mutable values.\nIterate over the keys.\nReturn the number of elements in the map.\nConstruct an empty <code>SortedMap</code>.\nIterate over the values.\nIterate over the values mutably.\nAn immutable <code>SmallSet</code> with values guaranteed to be sorted.\nCheck if the set contains the given value.\nReturns the argument unchanged.\nGet the element in the set.\nGet the element at the given index.\nCalls <code>U::from(self)</code>.\nCheck if the set is empty.\nIterate over the elements.\nReturn the number of elements in the set.\nConstruct an empty <code>SortedSet</code>.\nConstruct without checking that the elements are sorted.\nIterate over the union of two sets.\nType which enfoces that its elements are sorted. That’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over the elements.\nConstruct an empty <code>SortedVec</code>.\nConstruct without checking that the elements are sorted.\nReference to an entry in a <code>UnorderedMap</code>.\nOccupied entry.\nOccupied entry.\nReference to an occupied entry in a <code>UnorderedMap</code>.\nBuilder for <code>RawEntryMut</code>.\nRaw entry.\nOccupied entry.\nVacant entry.\nHash map which does not expose any insertion …\nVacant entry.\nVacant entry.\nReference to a vacant entry in a <code>UnorderedMap</code>.\nClear the map, removing all entries.\nDoes the map contain the specified key?\nDoes the map contain the specified key?\nGet the entries in the map, sorted by key.\nEntries in the map, in arbitrary order.\nEntries in the map, in arbitrary order.\nGet an entry in the map for in-place manipulation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind an entry by hash and equality function.\nFind an entry by key.\nFind an entry by hashed key.\nRemove the entry from the map.\nGet a reference to the value associated with the entry.\nGet a reference to the value associated with the given key.\nGet a reference to the value associated with the given key.\nGet a reference to the value associated with the entry.\nGet a reference to the value associated with the entry.\nGet a mutable reference to the value associated with the …\nReplace the value associated with the entry.\nInsert a value into the map.\nReplace the value associated with the entry.\nInsert entry.\nInsert an entry into the map.\nInsert entry.\nReplace the key associated with the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>HashMap</code>.\nIs the map empty?\nGet a reference to the key associated with the entry.\nKeys in the map, in arbitrary order.\nGet the number of elements in the map.\nApply the function to value.\nCreate a new empty map.\nLower-level access to the entry API.\nRemove the entry, return the value.\nRemove an entry from the map.\nRemove the entry, return the key and value.\nPreserve only the elements specified by the predicate.\nValues in the map, in arbitrary order.\nValues in the map, in arbitrary order.\nCreate a new empty map with the specified capacity.\nOccupied entry.\nBuilder for <code>RawEntryMut</code>.\nReference to an entry in a <code>UnorderedSet</code>.\nReference to an occupied entry in a <code>UnorderedSet</code>.\nReference to a vacant entry in a <code>UnorderedSet</code>.\n<code>HashSet</code> that does not expose insertion order.\nVacant entry.\nClear the set, removing all values.\nDoes the set contain the specified value?\nDoes the set contain the specified value?\nGet the entries in the set, sorted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind the entry for a key.\nFind the entry for a key.\nFind the entry by hash and equality function.\nReplace the entry.\nInsert an entry to the set. This function computes the …\nInsert a value into the set.\nInsert an entry to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the set empty?\nGet the number of elements in the set.\nCreate a new empty set.\nLower-level access to the underlying map.\nRemove the entry.\nCreate a new empty set with the specified capacity.\nIterator which consumes the <code>Vec2</code>.\nIterator over <code>Vec2</code> elements.\nArray of pairs <code>(A, B)</code>, where <code>A</code> and <code>B</code> are stored separately.\nCapacity.\nRemove all elements.\nGet the first element reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an element reference by index.\nGet an element mutable reference by index.\nGet an element reference by index skipping bounds check.\nGet an element mutable reference by index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs empty.\nIterate over the elements.\nGet the last element reference.\nNumber of elements.\nEmpty vec.\nRemove the last element.\nPush an element.\nRemove an element by index.\nReserve capacity for <code>additional</code> elements.\nRetains only the elements specified by the predicate.\nIf capacity exceeds length, shrink capacity to length.\nSort the elements using given comparator.\nTruncate the vector to the given length.\nNew instance with given capacity.")