searchState.loadedDescShard("dice", 0, "The dynamic incremental caching computation engine that …\nDescribes the kind of activation, and possibly carries …\nAn ActivationTracker can be used to identify which keys …\nContext available to the function running inside the …\nA handle providing the ability to explicitly cancel the …\nChecking dependencies has finished.\nChecking dependencies has started.\nIndicates no (non-Ignored) invalidated source data flowed …\nCompute has finished.\nCompute has started.\nSupplied value can be passed using this object.\nKey of the value that this projection key is computed from.\nAn incremental computation engine that executes arbitrary …\nThe context for computations to register themselves, and …\nThe invalidation paths for a key. This is accessible from …\nContext for projection key computation.\nThe invalidation path state for a computation node.\nThe base struct for which all computations start. This is …\nThe struct for which we build transactions. This is where …\nA type erased Key. Dice APIs that return key references …\nThis key was evaluated. Evaluation data will be passed if …\nKey evaluation finished.\nProvides informative stats over all dice instances.\nThe key can be an invalidation source for both the “…\nThe key will be ignored for invalidation source tracking.\nSpecialized version of <code>Key</code> above. This type of Key is …\nInvalidated data has flowed into this computation. …\nA node in the invalidation path.\nDice tracks up to two invalidation paths for each node, a …\nThe computation Key that maps to a value. The key will be …\nThe key can be an invalidation source only for the “…\nComputed value which is not directly visible to user.\nSynchronously computed key from an “opaque” value.\nThis key was reused. No data is passed.\nKey evaluation started.\nThe invalidation path state is unknown. We only track the …\nIncludes all user related computation-specific data.\nA UserCycleDetector can be used for custom cycle detection …\nA UserCycleDetectorGuard is used to track the currently …\nThis projection key is mapped to this value.\nWe require that UserComputationData always be constructed …\nCalled by dice when a dependency edge is encountered.\nAttempts to cancel the future this handle is associated …\nA count of how many computations have been cancelled.\nRecords a set of <code>Key</code>s as changed so that they, and any …\nRecords a set of <code>Key</code>s as changed to a particular value so …\nCommit the changes registered via ‘changed’ and ‘…\nCommit the changes registered via ‘changed’ and ‘…\nCompute the projection key value.\nGets the result of the given computation key. Record …\nComputes all the given tasks in parallel.\nComputes all the given tasks in parallel.\nMaps the items into computation futures and joins on them.\nCreates computation Futures for all the given tasks.\nCompute “opaque” value where the value is only …\nEnter a critical section during which the current future …\nGets the current cycle guard if its set. If it’s set but …\nThe DiceData provides a spot for users to attach whatever …\nUsed to declare a higher order closure for compute2 and …\nUsed to declare a higher order closure for compute_join …\nIgnore cancellations while ‘CriticalSectionGuard’ is …\nIf computed value is equal to previously cached value, …\nReturns whether the <code>DiceTransaction</code> is equivalent. …\nCalled by DICE when the key finished computing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the “invalidation path”.\nReturns the current tracked invalidation paths for this …\nData that is static per the entire lifetime of Dice. These …\nData that is static per the entire lifetime of Dice. These …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an Updater to record changes to DICE that upon …\nInterfaces for introspection of the DICE graph\nQueries whether the current future (if it supports explicit\ntrue when there are no active tasks nor transactions alive\nReceives when a key was activated (computed, or reused). …\nProvides a short informative name for this projection type.\nProvides a short informative name for this projection type.\nProvides a short informative name for this key type.\nProvides a short informative name for this key type.\nCreate a new context from a thread that is never canceled\nData that is static for the lifetime of the current …\nData that is static for the lifetime of the current …\nMachinery to provide. Default implementation is no-op.\nMachinery to provide. Default implementation is no-op.\nProvide a reference. Discard the value if the type is not …\nProvide a reference. Discard the value if the type is not …\nProvide a value. Discard the value if the type is not …\nProvide a value. Discard the value if the type is not …\nStores the given data, overriding the previous value if …\nCalled by DICE when it starts computing a key. <code>key</code> will be …\nStore some extra data that the ActivationTracker will …\nCompute all the given tasks in parallel.\nCompute all the given tasks in parallel.\nMaps the items into computations futures and then returns …\nTries to disable cancellation for this task from here on. …\nUsed in error messages.\nIf the computed value is <code>false</code>, DICE will consider that …\nIf the computed value is <code>false</code>, DICE will consider that …\nWait until all active versions have exited.\nDiceComputations &amp;mut-based api can make some computations …\nEnter a structured cancellation section. The caller …\nDeps and Rdeps are behind read locks, and if dumping after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShorten a type name like\nTesting utility that can be used to build a specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmocks the call of compute for the key <code>expected_k</code> so that …")