searchState.loadedDescShard("buck2_futures", 0, "Defines a future with explicit cancellation\nFutures with specialized dropping behaviour\nA future that can be canceled via an explicit …\nThe future that is spawned, but has various more strict …\nContext available to the function running inside the …\nA handle providing the ability to explicitly cancel the …\nA Future that resolves only when the associated task has …\nWhen held, prevents cancellation of the current explicitly …\nA marker that indicates that cancellations have been …\nA handle that will cancel the associated …\nAttempts to cancel the future this handle is associated …\nEnter a critical section during which the current future …\nIgnore cancellations while ‘CriticalSectionGuard’ is …\nAllow cancellations again, but unlike dropping it, also …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries whether the current future (if it supports explicit\nCreate a new context from a thread that is never canceled\nTries to disable cancellation for this task from here on. …\nIgnores cancellations forever if we are not already …\nEnter a structured cancellation section. The caller …\nA future with a value attached that will be dropped …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaps the future with the given ‘f’, except it takes …\nAn owned permission to join on a task (await its …\n“Detaches” the task. This will return a pair of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawn a future and return a DropcancelJoinHandle. The …\nA spawner that utilizes a generic context to decorate/wrap …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")