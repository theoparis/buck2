searchState.loadedDescShard("superconsole", 0, "The superconsole crate provides a handler and building …\nDenotes a rectangular area.\nDenotes a particular axis (x or y).  Used for several …\nHandles rendering the console using the user-defined …\nClears the canvas portion of the superconsole.\nGetting started truly from scratch is excessive for every …\nReturns true iff the passed dimension is smaller than or …\nProvides a variety of utilities for working with <code>Line</code>s.\nFinds the size of a <code>Component</code>’s output in a given …\nQueues the passed lines to be drawn on the next render. …\nQueues the passed lines of auxillary output to be drawn on …\nConvenience method:\nPerform a final render with <code>DrawMode::Final</code>. Each …\nPerform a final render, using a specified <code>DrawMode</code>. Each …\nForce a new SuperConsole to be built with a root …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the smallest bounding box that fits in both …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBest effort conversion - it will truncate to the nearest …\nBuild a new SuperConsole with a root component.\nRender at a given tick.  Draws all components and drains …\nProvides stylization for Strings.\nTesting utilities for Superconsole.\nReturns the smallest bounding box in which both Dimensions …\nA builder to create SuperConsole, with more options.\nBuild a new SuperConsole if stderr is a TTY.\nBuild a new SuperConsole regardless of whether stderr is a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnable non-blocking I/O.\nWrite to a different I/O\nThe <code>Blank</code> component is a dead-end component that emits …\nComponent that ensures its child component has at most …\nComponents are pluggable drawers that output lines of …\nDraw components horizontally, each next component is …\nUsed to mark whether a draw is final.\nDraw components vertically, one after the other.\nOftentimes it is useful to align text inside the bounding …\nAdd another component. New component <code>draw</code> is called with …\nAdd another component. New component <code>draw</code> is called with …\nInterprets the current caller state to create its drawing. …\nThis method is to be implemented for components to provide …\nReturns the empty vector\nFinish rendering, return the result.\nFinish rendering, return the result.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct rendered with given dimensions.\nConstruct rendered with given dimensions.\nSplitting is one of the most primitive building blocks of …\nThe <code>Aligned</code> <code>Component</code> can be used to specify in which part …\nContent appears at the bottom.\nContent appears approximately equidistant between top and …\nContent appears in the middle.\nSelect the alignment of the horizontal content\nContent appears at the left. The argument determines …\nContent appears to the right.\nContent appears at the top.\nSelect the alignment of the vertical content\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Alignment</code> component with the given …\nThe <code>Bordered</code> component can be used to put borders on all …\nThe <code>BorderedSpec</code> allows the callee to specify the borders …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Padded</code> <code>Component</code> wraps its child by padding left, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Splits</code> along a given <code>direction</code> for its child <code>components</code>. …\nControls the way the splitter displays its children.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPreconditions:\nA <code>Line</code> is an abstraction for a collection of stylized or …\nA <code>Span</code> is a segment of text that may or may not have <code>style</code> …\nReturns the maximum line width and the number of lines. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes a multiline string that might contain ANSI color …\nCreates an instance of <code>Lines</code> with a style applied from a …\nSame as <code>from_multiline_string</code>, but does not use lossy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo lines.\nDetermine if this span is mergeable with another span, …\nIterate over the spans in the line.\nIterates over each <code>Grapheme</code> in the <code>Span</code>. Applies the …\nJoin blocks horizontally, i.e. side by side.\nAdds padding to each line dependent on its length so that …\nReturn the length of the all words in the line added …\nNumber of lines.\nReturns the number of graphemes in the span.\nReturns the max column width of any line\nEmpty lines block.\nEquivalent to <code>new_unstyled</code>, except with styling.\nEquivalent to <code>Self::new_styled</code> except it will sanitize the …\nCreate a Span that allows all whitespace characters, …\nAttempt to create a new, unstyled span equivalent to the …\nSame behavior as pad right, but the pad is on the left\nExtends the Lines list by the given length, adding empty …\nPrepends a fixed <code>amount</code> of padding to each row. Unlike …\nGiven a set of lines, inserts the specified amount of …\nSame functionality as <code>pad_lines_bottom</code> but on the top.\nAdds padding to the right side of the line. This adds a …\nCreate an unstyled span with the specified amount of …\nAppend a span to the line.\nPrepend a span to the line.\nRender the line as a string with ANSI escape codes.\nSets the lines to the exact dimensions specified below, …\nSets the line list to the given length, padding or …\nGiven a set of lines, set them all to the exact width\nTruncates columns and rows that do not fit within a …\nEither calls <code>pad_right</code> or <code>truncate_line</code> until the line is …\nConcatenate spans, discarding any styling.\nSlices out some middle subline of the Line. Removes the …\nTruncates the right side of the line until it is no longer …\ntruncates all lines to the same max width.\nTruncates the line list to the given length, removing …\n<code>Spans</code> are only valid if they do not contain any non …\nAuxiliary output stream (default: stdout)\nMain output stream (default: stderr)\nRepresents the target stream for output\nGet this Output as an Any. This is used for testing.\nGet this Output as a mutable Any. This is used for testing.\nCheck if auxillary stream is tty\nCalled when the console has finalized. This must block if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled to produce output. This may be called without …\nCalled to produce to a specific output target. This may be …\nCalled before rendering will occur. This has a chance to …\nHow big is the terminal to write to.\nAn ANSI color. See 256 colors - cheat sheet for more info.\nRepresents an attribute.\nBlack color.\nLight blue color.\nIncreases the text intensity.\nRepresents a color.\nThe style that can be put on content.\nCrosses the text.\nLight cyan color.\nDark blue color.\nDark cyan color.\nDark green color.\nDark grey color.\nDark magenta color.\nDark red color.\nDark yellow color.\nDecreases the text intensity.\nDouble underlines the text.\nMakes the text encircled.\nSets the Fraktur typeface.\nMakes the text framed.\nLight green color.\nGrey color.\nHides the text (also known as Conceal).\nEmphasises the text.\nLight magenta color.\nTurns off the text blinking (<code>SlowBlink</code> or <code>RapidBlink</code>).\nTurns off the <code>Bold</code> attribute. - Inconsistent - Prefer to …\nTurns off the <code>Hidden</code> attribute.\nTurns off the <code>Italic</code> attribute.\nTurns off the <code>Reverse</code> attribute.\nTurns off the <code>Underlined</code> attribute.\nSwitches the text back to normal intensity (no bold, …\nTurns off the <code>CrossedOut</code> attribute.\nTurns off the <code>Frame</code> and <code>Encircled</code> attributes.\nTurns off the <code>OverLined</code> attribute.\nDraws a line at the top of the text.\nMakes the text blinking (&gt;= 150 per minute).\nLight red color.\nResets all the attributes.\nResets the terminal color.\nSwaps foreground and background colors.\nAn RGB color. See RGB color model for more info.\nMakes the text blinking (&lt; 150 per minute).\nThis type with styles applied.\nThe style with the content to be styled.\nProvides a set of methods to set attributes and colors.\nUndercurls the text.\nUnderdashes the text.\nUnderdots the text.\nUnderlines the text.\nWhite color.\nLight yellow color.\nCreates a <code>StyledContent</code> by applying the style to the given …\nStyles the content with the attribute.\nList of attributes.\nThe background color.\nSets the foreground color to <code>Black</code>.\nSets the foreground color to <code>Blue</code>.\nApplies the <code>Bold</code> attribute to the text.\nReturns a u32 with one bit set, which is the signature of …\nReturns the content.\nApplies the <code>CrossedOut</code> attribute to the text.\nSets the foreground color to <code>Cyan</code>.\nSets the foreground color to <code>DarkBlue</code>.\nSets the foreground color to <code>DarkCyan</code>.\nSets the foreground color to <code>DarkGreen</code>.\nSets the foreground color to <code>DarkGrey</code>.\nSets the foreground color to <code>DarkMagenta</code>.\nSets the foreground color to <code>DarkRed</code>.\nSets the foreground color to <code>DarkYellow</code>.\nApplies the <code>Dim</code> attribute to the text.\nThe foreground color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a ‘Color’ from the tuple representation.\nCreates a <code>Color</code> from the string representation.\nSets the foreground color to <code>Green</code>.\nSets the foreground color to <code>Grey</code>.\nApplies the <code>Hidden</code> attribute to the text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies the <code>Italic</code> attribute to the text.\nIterates over all the variants of the Attribute enum.\nSets the foreground color to <code>Magenta</code>.\nApplies the <code>Reverse</code> attribute to the text.\nCreates a new <code>ContentStyle</code>.\nCreates a new <code>StyledContent</code>.\nSets the background color.\nSets the background color to <code>Black</code>.\nSets the background color to <code>Blue</code>.\nSets the background color to <code>Cyan</code>.\nSets the background color to <code>DarkBlue</code>.\nSets the background color to <code>DarkCyan</code>.\nSets the background color to <code>DarkGreen</code>.\nSets the background color to <code>DarkGrey</code>.\nSets the background color to <code>DarkMagenta</code>.\nSets the background color to <code>DarkRed</code>.\nSets the background color to <code>DarkYellow</code>.\nSets the background color to <code>Green</code>.\nSets the background color to <code>Grey</code>.\nSets the background color to <code>Magenta</code>.\nSets the background color to <code>Red</code>.\nSets the background color to <code>White</code>.\nSets the background color to <code>Yellow</code>.\nParses an ANSI color sequence.\nApplies the <code>RapidBlink</code> attribute to the text.\nSets the foreground color to <code>Red</code>.\nApplies the <code>Reset</code> attribute to the text.\nApplies the <code>Reverse</code> attribute to the text.\nReturns the SGR attribute value.\nApplies the <code>SlowBlink</code> attribute to the text.\nCreates a <code>StyledContent</code>.\nReturns the style.\nReturns a mutable reference to the style, so that it can …\nStyles this type.\nTry to create a <code>Color</code> from the string representation. This …\nSets the underline color.\nSets the underline color to <code>Black</code>.\nSets the underline color to <code>Blue</code>.\nThe underline color.\nSets the underline color to <code>Cyan</code>.\nSets the underline color to <code>DarkBlue</code>.\nSets the underline color to <code>DarkCyan</code>.\nSets the underline color to <code>DarkGreen</code>.\nSets the underline color to <code>DarkGrey</code>.\nSets the underline color to <code>DarkMagenta</code>.\nSets the underline color to <code>DarkRed</code>.\nSets the underline color to <code>DarkYellow</code>.\nSets the underline color to <code>Green</code>.\nSets the underline color to <code>Grey</code>.\nSets the underline color to <code>Magenta</code>.\nSets the underline color to <code>Red</code>.\nSets the underline color to <code>White</code>.\nSets the underline color to <code>Yellow</code>.\nApplies the <code>Underlined</code> attribute to the text.\nSets the foreground color to <code>White</code>.\nSets the foreground color.\nSets the foreground color to <code>Yellow</code>.\nAn output for testing that doesn’t do real I/O.\nThe frames that were written to this output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCallers can modify this to indicate whether the output is …\nThe size to report the terminal")