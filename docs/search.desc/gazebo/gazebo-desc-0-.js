searchState.loadedDescShard("gazebo", 0, "A collection of well-tested primitives that have been …\nCast between types with no conversion.\nAdditions to the <code>Ref</code> mechanism.\nTraits to help implementing dynamic comparisons.\nPerforms a chain of comparison operation expressions …\nPerforms a chain of equals operation expressions yielding …\nFile/IO operations.\nUtilities for working with hashes.\nAdditional <code>PhantomData</code> related types.\nStandard functions. Usually imported with …\n<code>transmute!(from-type, to-type, value)</code> will do a <code>transmute</code>, …\nOperations working on Rust types.\nWorking with the variants of an <code>enum</code>.\nUndefined behaviour if the argument does not satisfy the …\nUndefined behaviour if the argument does not satisfy the …\nLike normal <code>transmute</code>, but without the compile-time check …\nUndefined behaviour if the argument is zero, or does not …\nA <code>Ref</code> that might not actually be borrowed. Either a <code>Ptr</code> (a …\nObtain an <code>ARef</code> from either a normal pointer or a <code>RefCell</code>.\nGet an <code>ARef</code> pointing at this type.\nReturn the underlying <code>RefCell</code> if <code>Self</code> is one, otherwise …\nSee <code>Ref.clone</code>. Not a self method since that interferes …\nSee <code>Ref.filter_map</code>. Not a self method since that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>Ref.map</code>. Not a self method since that interferes with …\nSee <code>Ref.map_split</code>. Not a self method since that interferes …\nCreate a new <code>ARef</code> from a pointer.\nCreate a new <code>ARef</code> from a reference.\nTry and get an <code>ARef</code> pointing at this type. Returns an <code>Err</code> …\nA simple api for creating all the directories up to a path …\nA type <code>T</code>, but with the hash computed in advance, so …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type like <code>PhantomData</code>, but where the contained <code>T</code> is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDerive the <code>Default</code> trait, but without requiring all type …\nExtension traits on <code>Iterator</code>.\nExtension traits on <code>Option</code> where it holds any value or ref.\nShort hand analogous to <code>Iter::cloned</code>, where items of <code>&amp;T</code> …\nShort hand analogous to <code>Iter::copied</code>, where items of <code>&amp;T</code> …\nShort hand analogous to <code>Iter::duped</code>, where items of <code>&amp;T</code> are …\nExtension traits on slices/<code>Vec</code>.\nExtension traits on <code>Vec</code>.\nIf the size of vector is 1, returns the first element …\nCopies the elements from <code>src</code> into <code>self</code>, analogous to …\nA shorthand for <code>into_iter().map(f).collect::&lt;Vec&lt;_&gt;&gt;()</code>. …\nIf this iterator contains a single element, return it. …\nA shorthand for …\nA shorthand for <code>iter().map(f).collect::&lt;Vec&lt;_&gt;&gt;()</code>. For …\nCalls <code>to_owned()</code> on all the items provided by the inner …\nTake ownership of each item in the vector using <code>to_owned</code>. …\nTake ownership of each item in the vector using <code>to_owned</code>. …\nLike <code>all</code>, except allow the function supplied to return a …\nLike <code>any</code>, except allow the function supplied to return a …\nLike <code>cmp_by</code>, except allow the function supplied to return …\nLike <code>eq_by</code>, except allow the function supplied to return a …\nLike <code>map</code>, but as a <code>Result</code>\nA shorthand for …\nLike <code>unzip</code>, except allowing the current <code>Iterator</code> to …\nA trait witnessing that two types are equal.\nConvert between two equal types.\nConvert between mutable references to two equal types.\nConvert between references to two equal types.\nGenerates implementation to unpack the inner data of enum …\nTrait for enums to return the name of the current variant …")